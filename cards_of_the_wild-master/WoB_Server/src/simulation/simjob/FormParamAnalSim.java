/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simulation.simjob;

import db.SimJobDAO;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import metadata.Constants;
import simulation.SpeciesZoneType;

/**
 * CustomSimForm is a JFrame form created by NetBeans GUI builder. It Allows a
 * user to create a custom simulation from scratch or (more likely) to load a
 * previous simulation job (from sim_job table) and modify that job's
 * configuration before submitting to SimJobManager to be run. Accessed from
 * SimJobMenu.java. See SimJob.java for a description of the required
 * node_config syntax.
 *
 * @author Justina
 */
public class FormParamAnalSim extends javax.swing.JFrame {

    /**
     * Creates new form CustomSimForm
     */
    private final SimJobManager jobMgr;
    private String jobStr;
    private int firstJob = SimJob.NO_ID;

    public FormParamAnalSim() {
        jobMgr = new SimJobManager();
        setLocationRelativeTo(null);    // Center
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        LoadSourceJobs = new javax.swing.JButton();
        timesteps = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jobDescript = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        minPPK = new javax.swing.JTextField();
        maxPPK = new javax.swing.JTextField();
        minPPR = new javax.swing.JTextField();
        maxPPR = new javax.swing.JTextField();
        minPPX = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        maxPPX = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        intvlPPK = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        intvlPPR = new javax.swing.JTextField();
        intvlPPX = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        maxPlantK = new javax.swing.JTextField();
        minPlantR = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        minPlantK = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        maxPlantR = new javax.swing.JTextField();
        minPlantX = new javax.swing.JTextField();
        maxPlantX = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        minAnimalX = new javax.swing.JTextField();
        maxAnimalX = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        intvlPlantK = new javax.swing.JTextField();
        intvlPlantR = new javax.swing.JTextField();
        intvlPlantX = new javax.swing.JTextField();
        intvlAnimalX = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        nodeListPlant = new javax.swing.JTextField();
        nodeListAnimal = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        RunSims = new javax.swing.JButton();
        Cancel = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Instructions = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        nodeConfig = new javax.swing.JTextArea();
        jLabel17 = new javax.swing.JLabel();
        bmPercentile = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        LoadSourceJobs.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        LoadSourceJobs.setText("Load Source Job");
        LoadSourceJobs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadSourceJobsActionPerformed(evt);
            }
        });

        timesteps.setText(String.valueOf(SimJob.DFLT_TIMESTEPS));
        timesteps.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        jLabel1.setText("Job Prefix (no commas):");
        jLabel1.setFocusable(false);

        try {
            jobDescript.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("**************************************************")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel2.setText("Timesteps:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(LoadSourceJobs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timesteps, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jobDescript, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LoadSourceJobs)
                    .addComponent(jLabel1)
                    .addComponent(timesteps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jobDescript, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        jLabel10.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel10.setText("- Primary Producer -");
        jLabel10.setFocusable(false);

        minPPK.setText("1,000.0");
        minPPK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minPPKActionPerformed(evt);
            }
        });

        maxPPK.setText("10,000.0");

        minPPR.setText("0.100");

        maxPPR.setText("1.000");
        maxPPR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxPPRActionPerformed(evt);
            }
        });

        minPPX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minPPXActionPerformed(evt);
            }
        });

        jLabel11.setText("K range:");

        jLabel22.setText("-");

        jLabel23.setText("R range:");

        jLabel24.setText("-");

        jLabel25.setText("-");

        maxPPX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxPPXActionPerformed(evt);
            }
        });

        jLabel3.setText("X range:");

        intvlPPK.setText("1,000.0");

        jLabel9.setText("Interval:");

        intvlPPR.setText("0.100");
        intvlPPR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intvlPPRActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel23)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(minPPK, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(minPPR, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(minPPX, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel24, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel25, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(maxPPX, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(intvlPPX, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(maxPPK, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(maxPPR, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel9)
                                    .addComponent(intvlPPK, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(intvlPPR)
                                        .addGap(20, 20, 20)))))))
                .addGap(19, 19, 19))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(minPPK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(maxPPK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(jLabel22)
                            .addComponent(intvlPPK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(minPPR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(maxPPR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23)
                            .addComponent(jLabel24)
                            .addComponent(intvlPPR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(minPPX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(maxPPX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(intvlPPX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jLabel25)))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel12.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel12.setText("- Plants (non-PP) -");
        jLabel12.setFocusable(false);

        maxPlantK.setText("10,000.0");
        maxPlantK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxPlantKActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel13.setText("- Animal Node Parameters -");
        jLabel13.setFocusable(false);

        minPlantK.setText("1,000.0");

        jLabel4.setText("K range:");

        jLabel5.setText("R range:");

        maxPlantR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxPlantRActionPerformed(evt);
            }
        });

        minPlantX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minPlantXActionPerformed(evt);
            }
        });

        jLabel6.setText("X range:");

        jLabel26.setText("-");

        jLabel27.setText("-");

        jLabel28.setText("-");

        jLabel8.setText("X range:");

        minAnimalX.setText("0.100");
        minAnimalX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minAnimalXActionPerformed(evt);
            }
        });

        maxAnimalX.setText("1.000");

        jLabel14.setText("Interval:");

        intvlPlantK.setText("1,000.0");

        intvlPlantR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intvlPlantRActionPerformed(evt);
            }
        });

        intvlAnimalX.setText("0.100");

        jLabel29.setText("-");

        jLabel15.setText("Specify node(s):");

        jLabel16.setText("(blank for all)");

        nodeListPlant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodeListPlantActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addGap(37, 37, 37))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(jPanel4Layout.createSequentialGroup()
                                                .addGap(20, 20, 20)
                                                .addComponent(jLabel8)
                                                .addGap(18, 18, 18)
                                                .addComponent(minAnimalX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel29)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(maxAnimalX, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel4Layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel4)
                                                    .addComponent(jLabel5)
                                                    .addComponent(jLabel6))
                                                .addGap(18, 18, 18)
                                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(minPlantK, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(minPlantX)
                                                        .addComponent(minPlantR, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                                        .addGap(5, 5, 5)
                                                        .addComponent(jLabel26))
                                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(jLabel28)
                                                            .addComponent(jLabel27))))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(maxPlantK, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(maxPlantR, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                                                        .addComponent(maxPlantX, javax.swing.GroupLayout.Alignment.LEADING)))))
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel4Layout.createSequentialGroup()
                                                .addGap(26, 26, 26)
                                                .addComponent(intvlAnimalX, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel4Layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(intvlPlantR, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                                                    .addComponent(intvlPlantX)))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(intvlPlantK, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addComponent(jLabel12))
                                .addGap(18, 18, 18)))
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16)
                            .addComponent(nodeListPlant)
                            .addComponent(nodeListAnimal, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel15)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minPlantK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxPlantK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel26)
                    .addComponent(intvlPlantK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nodeListPlant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minPlantR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(maxPlantR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27)
                    .addComponent(intvlPlantR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minPlantX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxPlantX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel28)
                    .addComponent(intvlPlantX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(minAnimalX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxAnimalX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(intvlAnimalX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29)
                    .addComponent(nodeListAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel7.setText("Node Configuration:");
        jLabel7.setFocusable(false);

        RunSims.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        RunSims.setText("Create Sim Jobs");
        RunSims.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunSimsActionPerformed(evt);
            }
        });

        Cancel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        Cancel.setText("Cancel");
        Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(RunSims, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(Cancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel7))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jLabel7)
                .addGap(36, 36, 36)
                .addComponent(RunSims, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        Instructions.setEditable(false);
        Instructions.setColumns(20);
        Instructions.setRows(5);
        Instructions.setText("* Run separate jobs for distinct animal intervals/ranges.\n* Use blanks to exclude evaluation of a particular \nparameter.");
        jScrollPane2.setViewportView(Instructions);

        nodeConfig.setColumns(20);
        nodeConfig.setLineWrap(true);
        nodeConfig.setRows(5);
        jScrollPane1.setViewportView(nodeConfig);

        jLabel17.setText("(All species) For inclusion, Avg Biomass Percentile >=");

        bmPercentile.setText("60");
        bmPercentile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bmPercentileActionPerformed(evt);
            }
        });

        jLabel18.setText("%");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bmPercentile, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel18))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 670, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(bmPercentile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RunSimsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunSimsActionPerformed
        System.out.println("You pressed Create Sim Jobs in Parameter Analysis Simulation\n");
        //save data
        SimJob job = jobMgr.getSimJob();
        if (job != null && !job.getNode_Config().isEmpty()
                && !jobDescript.getText().replace(" ", "").isEmpty()) {
            updateJobFromFields(job);
            repaint();

            setVisible(false);

            try {
                createParamAnalSimJobs(job);
            } catch (SQLException ex) {
                Logger.getLogger(FormParamAnalSim.class.getName()).log(Level.SEVERE, null, ex);
            }

            dispose();
        } else {
            JOptionPane.showMessageDialog(null, "\nLoaded Source Job and Job Prefix are REQUIRED.\n",
                    "Load Previous Job", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_RunSimsActionPerformed

    private void CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelActionPerformed
        System.out.println("You pressed Cancel in Parameter Analysis Simulation");
        dispose();
    }//GEN-LAST:event_CancelActionPerformed

    private void LoadSourceJobsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadSourceJobsActionPerformed
        System.out.println("You pressed Load Source Job");
        jobStr = JOptionPane.showInputDialog(null,
                "\nWhat job ID do you want to load?\n",
                "Load Source Job", JOptionPane.YES_NO_OPTION);
        if (!jobStr.isEmpty()) {
            //setVisible(false);
            SimJob job = null;
            //9/25/14, JTC, added flag saveAsNew to indicate that job should be
            //loaded as a new job rather than keeping existing job ID
            boolean saveAsNew = true;
            try {
                job = jobMgr.createSimJobFromPrior(Integer.parseInt(jobStr.trim()), saveAsNew);
            } catch (SQLException ex) {
                Logger.getLogger(FormParamAnalSim.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (job != null) {
                timesteps.setText(String.valueOf(job.getTimesteps()));

                SimJobSZT pp = job.getSpeciesZoneByNodeId(Constants.PP_NODE_ID);

                nodeConfig.setText(job.getNode_Config());
                repaint();
            } else {
                JOptionPane.showMessageDialog(null, "\nFailed to load job " + jobStr + ".\n",
                        "Load Previous Job", JOptionPane.ERROR_MESSAGE);
            }
            setVisible(true);
        }
    }//GEN-LAST:event_LoadSourceJobsActionPerformed

    private void minPPKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minPPKActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_minPPKActionPerformed

    private void minPPXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minPPXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_minPPXActionPerformed

    private void maxPPXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxPPXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maxPPXActionPerformed

    private void maxPPRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxPPRActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maxPPRActionPerformed

    private void maxPlantKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxPlantKActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maxPlantKActionPerformed

    private void maxPlantRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxPlantRActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maxPlantRActionPerformed

    private void minAnimalXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minAnimalXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_minAnimalXActionPerformed

    private void intvlPPRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intvlPPRActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_intvlPPRActionPerformed

    private void intvlPlantRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intvlPlantRActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_intvlPlantRActionPerformed

    private void nodeListPlantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodeListPlantActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nodeListPlantActionPerformed

    private void minPlantXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minPlantXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_minPlantXActionPerformed

    private void bmPercentileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bmPercentileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bmPercentileActionPerformed

    private void updateJobFromFields(SimJob job) {
        job.setJob_Descript(jobDescript.getText().trim());

        //process any updates to base node configuration
        if (!job.getNode_Config().equals(nodeConfig.getText())) {
            job.setNode_Config(nodeConfig.getText());
        }

        if (timesteps.getText().isEmpty()) {
            job.setTimesteps(SimJob.DFLT_TIMESTEPS);
        } else {
            job.setTimesteps(Integer.parseInt(timesteps.getText().trim()));
        }
    }

    private void createParamAnalSimJobs(SimJob job) throws SQLException {
        List<SpeciesZoneType> sztList = job.getSpeciesZoneList();
        int jobId = SimJob.NO_ID;
        //get original job history
        SimJob oldJob = SimJobDAO.loadCompletedJob(Integer.parseInt(jobStr));
        EcosystemTimesteps ecosysTimesteps = oldJob.extractCSVData();
        String includeList = "," + 
                nodeListPlant.getText() + "," + 
                nodeListAnimal.getText() + ",";
                
        //loop through nodes and process each node's parameters
        for (SpeciesZoneType szt : sztList) {
            int nodeIdx = szt.getNodeIndex();
            String nodeStr = "," + nodeIdx + ",";

            //if node's biomass is not w/in specified percentile, exclude
            //unless it's the primary producer or specified as a node to include
            if (nodeIdx != Constants.PP_NODE_ID && !includeList.contains(nodeStr)
                    && (ecosysTimesteps.avgBiomassPercentile(nodeIdx) * 100.0)
                    < Double.parseDouble(bmPercentile.getText())) {
                continue;
            }

            //process primary producer parameters
            if (nodeIdx == Constants.PP_NODE_ID) {
                if (!minPPK.getText().isEmpty() && !maxPPK.getText().isEmpty()
                        && !intvlPPK.getText().isEmpty()) {
                    jobId = createJobs(job, nodeIdx, "K", (double) Double.valueOf(minPPK.getText().replace(",", "")),
                            (double) Double.valueOf(maxPPK.getText().replace(",", "")),
                            intvlPPK.getText().replace(",", ""));
                }
                if (!minPPR.getText().isEmpty() && !maxPPR.getText().isEmpty()
                        && !intvlPPR.getText().isEmpty()) {
                    jobId = createJobs(job, nodeIdx, "R", (double) Double.valueOf(minPPR.getText()),
                            (double) Double.valueOf(maxPPR.getText()),
                            intvlPPR.getText());
                }
                if (!minPPX.getText().isEmpty() && !maxPPX.getText().isEmpty()
                        && !intvlPPX.getText().isEmpty()) {
                    jobId = createJobs(job, nodeIdx, "X", (double) Double.valueOf(minPPX.getText()),
                            (double) Double.valueOf(maxPPX.getText()),
                            intvlPPX.getText());

                }
                //process plant (non-pp) paramaters
            } else if (szt.getSpeciesType().getOrganismType()
                    == Constants.ORGANISM_TYPE_PLANT) {
                if (nodeListPlant.getText().isEmpty() || includeList.contains(nodeStr)) {
                    //param K (carrying capacity) must be multiplied by node distribution for plant species
                    SimJobSZT sjSzt = (SimJobSZT) szt;
                    if (!minPlantK.getText().isEmpty() && !maxPlantK.getText().isEmpty()
                            && !intvlPlantK.getText().isEmpty()) {
                        jobId = createJobs(job, nodeIdx, "K", (double) Double.valueOf(minPlantK.getText().replace(",", "")),
                                (double) Double.valueOf(maxPlantK.getText().replace(",", "")) * sjSzt.distribution,
                                intvlPlantK.getText().replace(",", ""));
                    }
                    if (!minPlantR.getText().isEmpty() && !maxPlantR.getText().isEmpty()
                            && !intvlPlantR.getText().isEmpty()) {
                        jobId = createJobs(job, nodeIdx, "R", (double) Double.valueOf(minPlantR.getText()),
                                (double) Double.valueOf(maxPlantR.getText()),
                                intvlPlantR.getText());
                    }
                    if (!minPlantX.getText().isEmpty() && !maxPlantX.getText().isEmpty()
                            && !intvlPlantX.getText().isEmpty()) {
                        jobId = createJobs(job, nodeIdx, "X", (double) Double.valueOf(minPlantX.getText()),
                                (double) Double.valueOf(maxPlantX.getText()),
                                intvlPlantX.getText());
                    }
                }

                //process animal parameters
            } else if (szt.getSpeciesType().getOrganismType()
                    == Constants.ORGANISM_TYPE_ANIMAL) {
                if (nodeListAnimal.getText().isEmpty() || includeList.contains(nodeStr)) {
                    if (!minAnimalX.getText().isEmpty() && !maxAnimalX.getText().isEmpty()
                            && !intvlAnimalX.getText().isEmpty()) {
                        jobId = createJobs(job, nodeIdx, "X", (double) Double.valueOf(minAnimalX.getText()),
                                (double) Double.valueOf(maxAnimalX.getText()),
                                intvlAnimalX.getText());
                    }
                }
            }
        }
        if (jobId != SimJob.NO_ID) {
            int jobCnt = jobId - firstJob + 1;
            System.out.printf("Parameter Analysis Simulations - created job IDs %d-%d (%d jobs)\n", 
                    firstJob, jobId, jobCnt);
            JOptionPane.showMessageDialog(null, "Created job IDs " + firstJob + "-" + 
                    jobId + " (" + jobCnt + " jobs)",
                    "Parameter Analysis Simulations Saved", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    //for given node/parameter, create multiple simulation jobs that vary parameter
    //value from min to max by intvl.
    private int createJobs(SimJob sourceJob, int paramNode, String paramID,
            double paramMin, double paramMax, String paramIntvlStr) throws SQLException {
        int lastJob = SimJob.NO_ID;

        //don't process if no interval or min or max are specified.
        if (!paramIntvlStr.isEmpty()) {
            double paramIntvl = Double.valueOf(paramIntvlStr);
            String paramFldName = SimJob.FLD_PREFIX + paramID;
            String dfltFldName = SimJob.FLD_PREFIX_DFLT + paramID;

            //obtain data about this species' dflt parameter settings.
            SimJobSZT szt = sourceJob.getSpeciesZoneByNodeId(paramNode);
            double dfltVal = 0.0;
            try {
                dfltVal = szt.getParamValue(dfltFldName);;
            } catch (Exception ex) {
                Logger.getLogger(FormParamAnalSim.class.getName()).log(Level.SEVERE, null, ex);
            }

            //goal is based on source job configuration
            double goalVal = dfltVal;
            try {
                goalVal = szt.getParamValue(paramFldName);
            } catch (Exception ex) {
                Logger.getLogger(FormParamAnalSim.class.getName()).log(Level.SEVERE, null, ex);
            }

            //loop through all requested values of the parameter, creating unique 
            //sim jobs for each
            double val = paramMin;
            int iteration = 0;
            while (val <= paramMax) {
                SimJob newJob = new SimJob(sourceJob);
                szt = newJob.getSpeciesZoneByNodeId(paramNode);

                //job description contains experiment parameters in comma delim form:
                //descript, node, param, low value, high value, increment, default val, goal val, 
                //iteration
                newJob.setJob_Descript(String.format("%s,%s,%s,%.3f,%.3f,%.3f,%.3f,%.3f,%d",
                        sourceJob.getJob_Descript(), paramNode, paramID, paramMin,
                        paramMax, paramIntvl, dfltVal, goalVal, iteration));
                try {
                    szt.setParamValue(paramFldName, val);
                } catch (Exception ex) {
                    Logger.getLogger(FormParamAnalSim.class.getName()).log(Level.SEVERE, null, ex);
                }

                //rebuild node configuration with updated szt value
                try {
                    newJob.buildNodeConfig();
                } catch (Exception ex) {
                    Logger.getLogger(FormParamAnalSim.class.getName()).log(Level.SEVERE, null, ex);
                }
                lastJob = newJob.saveJob();
                if (firstJob == SimJob.NO_ID) {
                    firstJob = lastJob;
                }

                System.out.printf("Param Analysis Sims - Created %s, job IDs %d - %d (%d jobs)\n",
                        newJob.getJob_Descript(), firstJob, lastJob, lastJob - firstJob + 1);

                val += paramIntvl;
                iteration++;
            }
        }

        return lastJob;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cancel;
    private javax.swing.JTextArea Instructions;
    private javax.swing.JButton LoadSourceJobs;
    private javax.swing.JButton RunSims;
    private javax.swing.JTextField bmPercentile;
    private javax.swing.JTextField intvlAnimalX;
    private javax.swing.JTextField intvlPPK;
    private javax.swing.JTextField intvlPPR;
    private javax.swing.JTextField intvlPPX;
    private javax.swing.JTextField intvlPlantK;
    private javax.swing.JTextField intvlPlantR;
    private javax.swing.JTextField intvlPlantX;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JFormattedTextField jobDescript;
    private javax.swing.JTextField maxAnimalX;
    private javax.swing.JTextField maxPPK;
    private javax.swing.JTextField maxPPR;
    private javax.swing.JTextField maxPPX;
    private javax.swing.JTextField maxPlantK;
    private javax.swing.JTextField maxPlantR;
    private javax.swing.JTextField maxPlantX;
    private javax.swing.JTextField minAnimalX;
    private javax.swing.JTextField minPPK;
    private javax.swing.JTextField minPPR;
    private javax.swing.JTextField minPPX;
    private javax.swing.JTextField minPlantK;
    private javax.swing.JTextField minPlantR;
    private javax.swing.JTextField minPlantX;
    private javax.swing.JTextArea nodeConfig;
    private javax.swing.JTextField nodeListAnimal;
    private javax.swing.JTextField nodeListPlant;
    private javax.swing.JTextField timesteps;
    // End of variables declaration//GEN-END:variables
}
